#!/usr/bin/env python3

import sys
import argparse
import csv
import time
import subprocess
import tempfile
import os
import logging

import Bio
import Bio.PDB
import Bio.SeqIO
import Bio.SeqUtils


def alignNeedle(sra, srbList):
    bsequenceFd, bsequenceFname = tempfile.mkstemp('.fasta', 'needle_b')
    try:
        bsequenceFile = os.fdopen(bsequenceFd, 'w')
        Bio.SeqIO.write(srbList, bsequenceFile, 'fasta')
        bsequenceFile.close()
        # sys.stderr.write('wrote bsequence file %s\n' % bsequenceFname)
        needleArgv = ['needle', '-asequence', 'stdin', '-bsequence', bsequenceFname, '-outfile', 'stdout', '-auto']
        sys.stderr.write('%s\n' % ' '.join(needleArgv))
        needleProcess = subprocess.Popen(needleArgv, stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)
        pid = os.fork()
        if pid == 0:
            needleProcess.stdout.close()
            Bio.SeqIO.write([sra], needleProcess.stdin, 'fasta')
            needleProcess.stdin.close()
            os._exit(0)
        needleProcess.stdin.close()
        alignmentList = list(Bio.AlignIO.parse(needleProcess.stdout, 'emboss', alphabet=Bio.Alphabet.Gapped(sra.seq.alphabet)))
        needleProcess.stdout.close()
        wPid, wExit = os.waitpid(pid, 0)
        if pid != wPid:
            raise Exception('wait returned pid %s (expected %d)' % (wPid, pid))
        if wExit != 0:
            raise Exception('wait on forked process returned %d' % wExit)
        r = needleProcess.wait()
        if r != 0:
            raise Exception('needle process exited with %d' % r)
    finally:
        os.unlink(bsequenceFname)
    return alignmentList


def extractAminoAcidSeqRecordFromChain(chain):
    residueList = sorted(chain.get_residues(), key=lambda r: r.get_id()[1])
    nonAminoAcidSet = set()
    l1 = []
    residueIndex = []
    for residue in residueList:
        n = residue.get_resname()
        a1 = Bio.SeqUtils.seq1(n)
        if a1 == 'X':
            nonAminoAcidSet.add(n)
        else:
            l1.append(a1)
            residueIndex.append(residue.get_id()[1])
    sys.stderr.write('chain %s: non-aminoacid residues: %s\n' % (chain.id, ', '.join(nonAminoAcidSet)))
    chainSeqRecord = Bio.SeqRecord.SeqRecord(Bio.Seq.Seq(''.join(l1), alphabet=Bio.Alphabet.generic_protein), 'chain%s' % chain.id)
    chainSeqRecord.letter_annotations['residueIndex'] = residueIndex
    return chainSeqRecord
                               

def makePymolHeatColorList(numLevels, baseGrey):
    redOffset = 0
    greenOffset = numLevels // 3
    blueOffset = 2 * numLevels // 3
    step = (255 - baseGrey) // numLevels * 3
    colorList = []
    for level in range(numLevels):
        r = max(baseGrey, min(baseGrey + (level - redOffset) * step, 255))
        g = max(baseGrey, min(baseGrey + (level - greenOffset) * step, 255))
        b = max(baseGrey, min(baseGrey + (level - blueOffset) * step, 255))
        sys.stderr.write('level = %d, step = %d, r = %d, g = %d, b = %d\n' % (level, step, r, g, b))
        colorList.append('0x%02x%02x%02x' % (r, g, b))
    return colorList


class CovidProtein:
    
    def __init__(self, structureName, covidGenome, featureQualifier, featureQualifierValue, pdbFname, chainId):
        self.structureName = structureName
        self.covidGenome = covidGenome
        self.pdbFname = pdbFname
        self.featureQualifier = featureQualifier
        self.featureQualifierValue = featureQualifierValue
        self.chainId = chainId
        self.feature = self.findFeature()
        if self.feature is None:
            raise Exception('failed to find feature with qualifier %s = %s' % (self.featureQualifier, self.featureQualifierValue))
        self.structure = self.readStructure()
        self.crossLinkGenomeAndPdb()

    def readStructure(self):
        return Bio.PDB.PDBParser().get_structure(self.structureName, self.pdbFname)
    
    def getChainIdList(self):
        return [chain.id for chain in self.structure.get_chains()]
    
    def getChainIndex(self):
        chainIdList = self.getChainIdList()
        if self.chainId not in chainIdList:
            raise Exception('chain %s not in structure (contains chains %s)' % (self.chainId, ', '.join(chainIdList)))
        return chainIdList.index(self.chainId)
    
    def getChain(self):
        return list(self.structure.get_chains())[self.getChainIndex()]

    def findFeature(self):
        for feature in self.covidGenome.features:
            if self.featureQualifier in feature.qualifiers:
                if self.featureQualifierValue in feature.qualifiers[self.featureQualifier]:
                    return feature
        return None
    
    def getAminoAcidSeqViaPolyPeptide(self):
        """obsolete, as chain index and polypeptide index are not always the same.
"""
        polyPeptideIndex = self.getChainIndex()
        ppBuilder = Bio.PDB.PPBuilder()
        polyPeptideList = list(ppBuilder.build_peptides(self.structure))
        return polyPeptideList[polyPeptideIndex]

    def crossLinkGenomeAndPdb(self):
        gapChar = '-'
        self.chainSeqRecord = extractAminoAcidSeqRecordFromChain(self.getChain())
        self.featureSeqRecord = self.feature.extract(self.covidGenome)
        translatedFeatureSeq = self.featureSeqRecord.seq.translate(to_stop=True)
        translatedFeatureSr = Bio.SeqRecord.SeqRecord(translatedFeatureSeq, id='%s_genomictrans' % self.structureName)
        alignment = alignNeedle(translatedFeatureSr, [self.chainSeqRecord])[0]
        self.featureSeqRecord.letter_annotations['chainIndex'] = [None] * len(self.featureSeqRecord)
        Bio.AlignIO.write(alignment, sys.stderr, 'fasta')
        iFeature = 0
        iChain = 0
        for i in range(alignment.get_alignment_length()):
            aaFeature = alignment[0][i]
            aaChain = alignment[1][i]
            if aaFeature != gapChar:
                if aaChain != gapChar:
                    j = iFeature * 3
                    self.featureSeqRecord.letter_annotations['chainIndex'][j] = iChain
                    self.featureSeqRecord.letter_annotations['chainIndex'][j + 1] = iChain
                    self.featureSeqRecord.letter_annotations['chainIndex'][j + 2] = iChain
            if aaChain != gapChar:
                iChain = iChain + 1
            if aaFeature != gapChar:
                iFeature = iFeature + 1

    def makeVariationLevelList(self):
        """Basic indicator of variation per codon.

Variation level is the sum of variants recorded for each
position in the codon, i.e. 3 for no variation (only base
in all positions is the reference base), 12 for all bases
in all three positions.
"""
        l = [0] * len(self.chainSeqRecord)
        for i in range(len(self.featureSeqRecord)):
            j = self.featureSeqRecord.letter_annotations['chainIndex'][i]
            if j is not None:
                l[j] = l[j] + len(self.featureSeqRecord.letter_annotations['variant'][i])
        return l
        # old code, presumably buggy
        cds = self.feature.extract(self.covidGenome)
        numCodons = len(cds) // 3
        l = []
        for i in range(numCodons):
            l.append(sum([len(varSet) + 1 for varSet in cds.letter_annotations['variant'][i:(i + 3)]]))
        return l

# pymol sample commands
# select resi 3 and chain A
# show sphere, (sele)
# show sphere, (sele)
# color 0xffaa22, (sele)
    def showMoleculePymol(self, prefixCommandList, suffixCommandList):
        variationLevelList = self.makeVariationLevelList()
        colorList = makePymolHeatColorList(10, 20)
        pymolCommandList = prefixCommandList[:]
        pymolCommandList.append('hide')
        for chainId in self.getChainIdList():
            if chainId != self.chainId:
                chainSelection = 'chain%s' % chainId
                pymolCommandList.append('select %s, chain %s' % (chainSelection, chainId))
                pymolCommandList.append('color blue, %s' % chainSelection)
                pymolCommandList.append('show sticks, %s' % chainSelection)
        chainSelection = 'chain%s' % self.chainId
        pymolCommandList.append('select %s, chain %s' % (chainSelection, self.chainId))
        pymolCommandList.append('color green, %s' % chainSelection)
        pymolCommandList.append('show sticks, %s' % chainSelection)
        for i in range(len(variationLevelList)):
            r = self.chainSeqRecord.letter_annotations['residueIndex'][i]
            selectionId = 'r%04d' % r
            pymolCommandList.append('select %s, resi %d and chain %s' % (selectionId, r, self.chainId))
            pymolCommandList.append('color %s, %s' % (colorList[variationLevelList[i] - 3], selectionId))
            pymolCommandList.append('show sphere, %s' % selectionId)
        pymolCommandList.append('deselect')
        pymolCommandList.extend(suffixCommandList)
        pymolArgv = ['pymol', '-p', self.pdbFname]
        stdin = sys.stdin
        stdout = sys.stdout
        stderr = sys.stderr
        pymolProcess = subprocess.Popen(pymolArgv, stdin=subprocess.PIPE, universal_newlines=True)
        for pymolCommand in pymolCommandList:
            # sys.stderr.write('%s\n' % pymolCommand)
            pymolProcess.stdin.write('%s\n' % pymolCommand)
            pymolProcess.stdin.flush()
        stderr.write('hit return\n')
        stdin.readline()
        pymolProcess.stdin.close()
        pymolReturncode = pymolProcess.wait()
        if pymolReturncode != 0:
            raise Exception('process %s returned %d' % (' '.join(pymolArgv), pymolReturncode))
        sys.stdin = stdin
        sys.stdout = stdout
        sys.stderr = stderr
        # sys.stderr.write('%s\n' % str(pymolCommandList))


def addVariation(covidGenome, variantListFname):
    if 'variant' in covidGenome.letter_annotations:
        raise Exception('variants already added')
    covidGenome.letter_annotations['variant'] = [set()] * len(covidGenome)
    print(len(covidGenome))
    with open(variantListFname, 'r') as variantListFile:
        for row in csv.DictReader(variantListFile, dialect='excel-tab'):
            chrom = row['CHROM']
            position = int(row['POS']) - 1
            refBase = row['REF']
            altBase = row['ALT']
            if chrom != covidGenome.name:
                raise Exception('position %d: name mismatch: genome is %s but variant CHROM is %s' % (position, covidGenome.name, chrom))
            if covidGenome.seq[position] != refBase:
                raise Exception('position %d: genome base is %s but reference base is %s' % (position, covidGenome.seq[position], refBase))
            # FIXME: should add refBase too?
            covidGenome.letter_annotations['variant'][position] = covidGenome.letter_annotations['variant'][position] | set(altBase)


def readCovidGenome(genbankFname, variantListFname=None):
    covidGenome = next(Bio.SeqIO.parse(genbankFname, 'genbank'))
    if variantListFname is not None:
        addVariation(covidGenome, variantListFname)
    return covidGenome


def testFunc(argNamespace):
    sys.stderr.write('just testing...\n')


def showCovidProteinFunc(argNamespace):
    suffixCommandList = ['zoom complete=1']
    covidGenome = readCovidGenome(argNamespace.genbankFname, argNamespace.variantListFname)
    if argNamespace.proteinName == 'mpro':
        covidProtein = CovidProtein('mpro', covidGenome, 'product', '3C-like proteinase', 'pdb6lu7.ent', 'A')
        suffixCommandList = ['rotate x, 130', 'rotate z, -30', 'rotate y, -80'] + suffixCommandList
    elif argNamespace.proteinName == 'spike':
        covidProtein = CovidProtein('spike', covidGenome, 'product', 'surface glycoprotein', '6vsb.pdb', 'C')
        suffixCommandList = ['rotate x, -70', 'rotate y, 160'] + suffixCommandList
    else:
        raise Exception('unknown protein name: %s' % argNamespace.proteinName)
    covidProtein.showMoleculePymol(['bg_color white', 'set fog, off'], suffixCommandList)


def addTestParser(subparsers):
    p = subparsers.add_parser('test', help='subcommand for testing new stuff')
    p.set_defaults(func=testFunc)


def addShowCovidProteinParser(subparsers):
    p = subparsers.add_parser('showprotein', help='show a protein')
    p.add_argument('proteinName', help='protein name')
    p.set_defaults(func=showCovidProteinFunc)


if __name__ == '__main__':
    logging.basicConfig(format='%(levelname)s: %(module)s:%(lineno)d, %(funcName)s, %(asctime)s: %(message)s')
    # logger = logging.getLogger(__name__)
    p = argparse.ArgumentParser(description='covidprotstruct -- explore Covid-19 protein structures')
    p.add_argument('--loglevel', help='set logging level [DEBUG, INFO, WARNING, ERROR, CRITICAL]')
    subparsers = p.add_subparsers(title='subcommands')
    addTestParser(subparsers)
    addShowCovidProteinParser(subparsers)
    argNamespace = p.parse_args()
    # FIXME: hack of adding hardcoded covid genome related file names to argNamespace
    argNamespace.genbankFname = 'NC_045512.2.gb'
    argNamespace.variantListFname = 'variant_list.tsv'
    argNamespace.rawCmdLine = ' '.join(['%s' % arg for arg in sys.argv])
    if argNamespace.loglevel is not None:
        loglevel = getattr(logging, argNamespace.loglevel.upper(), None)
        if loglevel is None:
            raise ValueError('invalid log level: %s' % argNamespace.loglevel)
        logging.getLogger().setLevel(loglevel)
    argNamespace.func(argNamespace)
    sys.exit(0)
    covidGenome = readCovidGenome(genbankFname, variantListFname)
    mproCovidProtein = CovidProtein('mpro', covidGenome, 'product', '3C-like proteinase', mproPdbFname, 'A')
    mproCovidProtein.showMoleculePymol(['bg_color white', 'set fog, off'], ['rotate x, 130', 'rotate z, -30', 'rotate y, -80', 'zoom complete=1'])
    sys.exit(1)
    # spike PDB file has chains apparently fragmented into multiple polypeptides
    # also, none of the three chains has an amino acid sequence matching that
    # in NC_045512. More intelligent matching up of genome to structure sequence
    # required.
    spikeCovidProtein = CovidProtein('spike', covidGenome, 'product', 'surface glycoprotein', spikePdbFname, 'C')
    spikeCovidProtein.showMoleculePymol(['bg_color white', 'set fog, off'], ['zoom complete=1'])
    sys.exit(1)
    nVar = [len(s) + 1 for s in covidGenome.letter_annotations['variant']]
    with open('nvar.csv', 'w') as f:
        w = csv.DictWriter(f, ['position', 'nvar'])
        w.writeheader()
        for i in range(len(nVar)):
            w.writerow({'position': i, 'nvar': nVar[i]})
    sys.exit(1)

    p = Bio.PDB.PDBParser()
    structure = p.get_structure('mpro', pdbFname)
    model = structure[0]
    chain = model['A']
    ppBuilder = Bio.PDB.PPBuilder()
    polyPeptideList = list(ppBuilder.build_peptides(structure))
    pdbMproPolyPeptide = polyPeptideList[0]
    pdbMproSeq = pdbMproPolyPeptide.get_sequence()
    srList = list(Bio.SeqIO.parse(genbankFname, 'genbank'))
    genbankSeqRecord = srList[0]
    mproFeature = None
    for feature in genbankSeqRecord.features:
        if 'product' in feature.qualifiers:
            if feature.qualifiers['product'][0] == '3C-like proteinase':
                mproFeature = feature
    if mproFeature is not None:
        genbankMproGeneSeq = mproFeature.extract(genbankSeqRecord.seq)
        print(genbankMproGeneSeq)
        genbankMproSeq = genbankMproGeneSeq.translate()
        print(str(genbankMproSeq) == str(pdbMproSeq))
